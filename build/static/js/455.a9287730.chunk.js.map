{"version":3,"file":"static/js/455.a9287730.chunk.js","mappings":"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","sources":["components/CardTypeSelectionModal/index.js","components/ReactPortal/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { doc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\n\r\nimport { db } from \"../../firebase\";\r\nimport * as cardTypeIcons from \"../../assets/cardTypeIcons\";\r\nimport { expansions } from \"../../constants/expansions\";\r\nimport { cardTypes } from \"../../constants/cardTypes\";\r\nimport ReactPortal from \"../ReactPortal\";\r\nimport MainButton from \"../MainButton\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst CardTypeSelectionModal = ({\r\n  isOpen,\r\n  handleClose,\r\n  cards,\r\n  id,\r\n  uuid,\r\n  playerCards,\r\n  expansionsList,\r\n  selectedPlayer,\r\n  selectedCards,\r\n}) => {\r\n  const [selectedCardType, setSelectedCardType] = useState(null);\r\n  const handleClick = () => {\r\n    if (selectedPlayer?.uid && selectedCardType) {\r\n      const desiredCard = playerCards[selectedPlayer.uid].find(\r\n        (item) => cards[item].type === selectedCardType\r\n      );\r\n\r\n      if (desiredCard) {\r\n        updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n          player_cards: {\r\n            ...playerCards,\r\n            [selectedPlayer.uid]: playerCards[selectedPlayer.uid].filter(\r\n              (item) => item !== desiredCard\r\n            ),\r\n            [uuid]: [\r\n              ...playerCards[uuid].filter(\r\n                (item) => !selectedCards.includes(item)\r\n              ),\r\n              desiredCard,\r\n            ],\r\n          },\r\n          out_card_deck: arrayUnion(...selectedCards),\r\n\r\n          game_moves: arrayUnion({\r\n            uid: uuid,\r\n            cardType: \"combo_3\",\r\n            desiredCard,\r\n            selectedPlayerUid: selectedPlayer.uid,\r\n          }),\r\n        });\r\n      } else {\r\n        updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n          player_cards: {\r\n            ...playerCards,\r\n            [uuid]: playerCards[uuid].filter(\r\n              (item) => !selectedCards.includes(item)\r\n            ),\r\n          },\r\n          out_card_deck: arrayUnion(...selectedCards),\r\n\r\n          game_moves: arrayUnion({\r\n            uid: uuid,\r\n            cardType: \"combo_3\",\r\n            selectedPlayerUid: selectedPlayer.uid,\r\n          }),\r\n        });\r\n      }\r\n    }\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const handleClickBlock = (cardType) => {\r\n    setSelectedCardType(cardType);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <ReactPortal wrapperId=\"react-portal-card-selection-modal\">\r\n      <div className=\"card-type-selection-modal\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"content_block\">\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.defuse)}\r\n              className={\r\n                selectedCardType === cardTypes.defuse ? \"selected\" : \"\"\r\n              }\r\n            >\r\n              <img src={cardTypeIcons.defuse} alt=\"\" width={60} height={60} />\r\n              <h3>Defuse</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.attack)}\r\n              className={\r\n                selectedCardType === cardTypes.attack ? \"selected\" : \"\"\r\n              }\r\n            >\r\n              <img src={cardTypeIcons.attack} alt=\"\" width={60} height={60} />\r\n              <h3>Attack</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.favor)}\r\n              className={selectedCardType === cardTypes.favor ? \"selected\" : \"\"}\r\n            >\r\n              <img src={cardTypeIcons.favor} alt=\"\" width={60} height={60} />\r\n              <h3>Favor</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.nope)}\r\n              className={selectedCardType === cardTypes.nope ? \"selected\" : \"\"}\r\n            >\r\n              <img src={cardTypeIcons.nope} alt=\"\" width={60} height={60} />\r\n              <h3>Nope</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.shuffle)}\r\n              className={\r\n                selectedCardType === cardTypes.shuffle ? \"selected\" : \"\"\r\n              }\r\n            >\r\n              <img src={cardTypeIcons.shuffle} alt=\"\" width={60} height={60} />\r\n              <h3>Shuffle</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.skip)}\r\n              className={selectedCardType === cardTypes.skip ? \"selected\" : \"\"}\r\n            >\r\n              <img src={cardTypeIcons.skip} alt=\"\" width={60} height={60} />\r\n              <h3>Skip</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.seeFuture)}\r\n              className={\r\n                selectedCardType === cardTypes.seeFuture ? \"selected\" : \"\"\r\n              }\r\n            >\r\n              <img\r\n                src={cardTypeIcons.seeFuture}\r\n                alt=\"\"\r\n                width={60}\r\n                height={60}\r\n              />\r\n              <h3>See the Future</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.tacocat)}\r\n              className={\r\n                selectedCardType === cardTypes.tacocat ? \"selected\" : \"\"\r\n              }\r\n            >\r\n              <img src={cardTypeIcons.tacocat} alt=\"\" width={60} height={60} />\r\n              <h3>Tacocat</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.cattermelon)}\r\n              className={\r\n                selectedCardType === cardTypes.cattermelon ? \"selected\" : \"\"\r\n              }\r\n            >\r\n              <img\r\n                src={cardTypeIcons.cattermelon}\r\n                alt=\"\"\r\n                width={60}\r\n                height={60}\r\n              />\r\n              <h3>Cattermelon</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.hairyPotatoCat)}\r\n              className={\r\n                selectedCardType === cardTypes.hairyPotatoCat ? \"selected\" : \"\"\r\n              }\r\n            >\r\n              <img\r\n                src={cardTypeIcons.hairyPotatoCat}\r\n                alt=\"\"\r\n                width={60}\r\n                height={60}\r\n              />\r\n              <h3>Hairy Potato Cat</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.beardCat)}\r\n              className={\r\n                selectedCardType === cardTypes.beardCat ? \"selected\" : \"\"\r\n              }\r\n            >\r\n              <img src={cardTypeIcons.beardCat} alt=\"\" width={60} height={60} />\r\n              <h3>Beard Cat</h3>\r\n            </div>\r\n            <div\r\n              onClick={() => handleClickBlock(cardTypes.rainbowRalphingCat)}\r\n              className={\r\n                selectedCardType === cardTypes.rainbowRalphingCat\r\n                  ? \"selected\"\r\n                  : \"\"\r\n              }\r\n            >\r\n              <img\r\n                src={cardTypeIcons.rainbowRalphingCat}\r\n                alt=\"\"\r\n                width={60}\r\n                height={60}\r\n              />\r\n              <h3>Rainbow-Ralphing Cat</h3>\r\n            </div>\r\n\r\n            {expansionsList?.includes(expansions.ImplodingKittens) && (\r\n              <>\r\n                <div\r\n                  onClick={() => handleClickBlock(cardTypes.reverse)}\r\n                  className={\r\n                    selectedCardType === cardTypes.reverse ? \"selected\" : \"\"\r\n                  }\r\n                >\r\n                  <img\r\n                    src={cardTypeIcons.reverse}\r\n                    alt=\"\"\r\n                    width={60}\r\n                    height={60}\r\n                  />\r\n                  <h3>Reverse</h3>\r\n                </div>\r\n                <div\r\n                  onClick={() => handleClickBlock(cardTypes.drawFromTheBottom)}\r\n                  className={\r\n                    selectedCardType === cardTypes.drawFromTheBottom\r\n                      ? \"selected\"\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  <img\r\n                    src={cardTypeIcons.drawFromTheBottom}\r\n                    alt=\"\"\r\n                    width={60}\r\n                    height={60}\r\n                  />\r\n                  <h3>Draw from the Bottom</h3>\r\n                </div>\r\n                <div\r\n                  onClick={() => handleClickBlock(cardTypes.feral)}\r\n                  className={\r\n                    selectedCardType === cardTypes.feral ? \"selected\" : \"\"\r\n                  }\r\n                >\r\n                  <img\r\n                    src={cardTypeIcons.feral}\r\n                    alt=\"\"\r\n                    width={60}\r\n                    height={60}\r\n                  />\r\n                  <h3>Feral Cat</h3>\r\n                </div>\r\n                <div\r\n                  onClick={() => handleClickBlock(cardTypes.alterTheFuture)}\r\n                  className={\r\n                    selectedCardType === cardTypes.alterTheFuture\r\n                      ? \"selected\"\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  <img\r\n                    src={cardTypeIcons.alterTheFuture}\r\n                    alt=\"\"\r\n                    width={60}\r\n                    height={60}\r\n                  />\r\n                  <h3>Alter the Future</h3>\r\n                </div>\r\n                <div\r\n                  onClick={() => handleClickBlock(cardTypes.targetedAttack)}\r\n                  className={\r\n                    selectedCardType === cardTypes.targetedAttack\r\n                      ? \"selected\"\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  <img\r\n                    src={cardTypeIcons.targetedAttack}\r\n                    alt=\"\"\r\n                    width={60}\r\n                    height={60}\r\n                  />\r\n                  <h3>Targeted Attacks</h3>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"btn_block\">\r\n            <MainButton\r\n              text={selectedCardType ? \"Go\" : \"Exit\"}\r\n              onClick={handleClick}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ReactPortal>\r\n  );\r\n};\r\n\r\nexport default CardTypeSelectionModal;\r\n","import { useState, useLayoutEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nfunction createWrapperAndAppendToBody(wrapperId) {\r\n  const wrapperElement = document.createElement(\"div\");\r\n  wrapperElement.setAttribute(\"id\", wrapperId);\r\n  document.body.appendChild(wrapperElement);\r\n  return wrapperElement;\r\n}\r\n\r\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }) {\r\n  const [wrapperElement, setWrapperElement] = useState(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let element = document.getElementById(wrapperId);\r\n    let systemCreated = false;\r\n\r\n    if (!element) {\r\n      systemCreated = true;\r\n      element = createWrapperAndAppendToBody(wrapperId);\r\n    }\r\n    setWrapperElement(element);\r\n\r\n    return () => {\r\n      if (systemCreated && element.parentNode) {\r\n        element.parentNode.removeChild(element);\r\n      }\r\n    };\r\n  }, [wrapperId]);\r\n\r\n  if (wrapperElement === null) return;\r\n\r\n  return createPortal(children, wrapperElement);\r\n}\r\n\r\nexport default ReactPortal;\r\n"],"names":["isOpen","handleClose","cards","id","uuid","playerCards","expansionsList","selectedPlayer","selectedCards","useState","selectedCardType","setSelectedCardType","handleClickBlock","cardType","ReactPortal","wrapperId","className","onClick","cardTypes","src","cardTypeIcons","alt","width","height","includes","expansions","MainButton","text","uid","desiredCard","find","item","type","updateDoc","doc","db","player_cards","filter","out_card_deck","arrayUnion","game_moves","selectedPlayerUid","children","wrapperElement","setWrapperElement","useLayoutEffect","element","document","getElementById","systemCreated","createElement","setAttribute","body","appendChild","createWrapperAndAppendToBody","parentNode","removeChild","createPortal"],"sourceRoot":""}