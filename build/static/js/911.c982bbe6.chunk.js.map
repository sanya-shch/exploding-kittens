{"version":3,"file":"static/js/911.c982bbe6.chunk.js","mappings":"gSAiGA,EAtF2B,SAAC,GAQrB,IAPLA,EAOI,EAPJA,OACAC,EAMI,EANJA,YACAC,EAKI,EALJA,GACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,cACAC,EACI,EADJA,kBAEA,GAAwCC,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAwBC,EAAAA,EAAAA,UAC5B,kBACEP,EAAYE,KACZM,EAAAA,EAAAA,IAAUR,EAAYE,GAFxB,GAGA,CAACA,EAAmBF,IAqCtB,OAAKJ,GAGH,SAACa,EAAA,EAAD,CAAaC,UAAU,oCAAvB,UACE,gBAAKC,UAAU,uBAAf,UACE,iBAAKA,UAAU,gBAAf,WACE,gBAAKA,UAAU,gBAAf,SACGL,EAAsBM,KAAI,SAACC,GAAD,OACzB,gBAEEF,UAAWP,IAAiBS,EAAO,WAAa,GAFlD,UAIE,gBACEC,IAAKC,EAAAA,GACLC,IAAI,GACJC,MAAO,IACPC,OAAQ,IACRC,QAAS,kBArBF,SAACN,GACtBR,EAAgBQ,EACjB,CAmB8BO,CAAeP,EAArB,KARNA,EAFkB,OAe7B,gBAAKF,UAAU,YAAf,UACE,SAACU,EAAA,EAAD,CACEC,KAAMlB,EAAe,KAAO,OAC5Be,QA3DQ,WAClB,GAAIf,GAAgBF,EAAmB,CAAC,IAAD,EAC/BqB,EAAsBvB,EAAYE,GAAmBsB,QACzD,SAACC,GAAD,OAAUA,IAASrB,CAAnB,IAGIsB,EAAc1B,EAAYD,GAAMyB,QACpC,SAACC,GAAD,OAAWxB,EAAc0B,SAASF,EAAlC,KAGFG,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,oBAAqBhC,GAAK,CAC1CiC,cAAa,kBACR/B,GADO,mBAETE,EAAoBqB,IAFX,SAGTxB,EAHS,kBAGE2B,GAHF,CAGetB,KAHf,IAKZ4B,cAAeC,EAAAA,GAAAA,WAAA,UAAchC,IAE7BiC,YAAYD,EAAAA,EAAAA,IAAW,CACrBE,IAAKpC,EACLqC,SAAU,UACVhC,aAAAA,EACAF,kBAAAA,KAGL,CAEDL,GACD,aAMmB,IAgCrB,C,sDC5DD,IAzBA,YAAwE,IAAjDwC,EAAgD,EAAhDA,SAAgD,IAAtC3B,UAAAA,OAAsC,MAA1B,uBAA0B,EACrE,GAA4CP,EAAAA,EAAAA,UAAS,MAArD,eAAOmC,EAAP,KAAuBC,EAAvB,KAmBA,IAjBAC,EAAAA,EAAAA,kBAAgB,WACd,IAAIC,EAAUC,SAASC,eAAejC,GAClCkC,GAAgB,EAQpB,OANKH,IACHG,GAAgB,EAChBH,EAhBN,SAAsC/B,GACpC,IAAM4B,EAAiBI,SAASG,cAAc,OAG9C,OAFAP,EAAeQ,aAAa,KAAMpC,GAClCgC,SAASK,KAAKC,YAAYV,GACnBA,CACR,CAWeW,CAA6BvC,IAEzC6B,EAAkBE,GAEX,WACDG,GAAiBH,EAAQS,YAC3BT,EAAQS,WAAWC,YAAYV,EAElC,CACF,GAAE,CAAC/B,IAEmB,OAAnB4B,EAEJ,OAAOc,EAAAA,EAAAA,cAAaf,EAAUC,EAC/B,C","sources":["components/CardSelectionModal/index.js","components/ReactPortal/index.js"],"sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport { doc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\n\r\nimport { db } from \"../../firebase\";\r\nimport { revers } from \"../../assets/cards\";\r\nimport { randomize } from \"../../helpers\";\r\nimport ReactPortal from \"../ReactPortal\";\r\nimport MainButton from \"../MainButton\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst CardSelectionModal = ({\r\n  isOpen,\r\n  handleClose,\r\n  id,\r\n  uuid,\r\n  playerCards,\r\n  selectedCards,\r\n  selectedPlayerUid,\r\n}) => {\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n\r\n  const randomizedPlayerCards = useMemo(\r\n    () =>\r\n      playerCards[selectedPlayerUid] &&\r\n      randomize(playerCards[selectedPlayerUid]),\r\n    [selectedPlayerUid, playerCards]\r\n  );\r\n\r\n  const handleClick = () => {\r\n    if (selectedCard && selectedPlayerUid) {\r\n      const selectedPlayerCards = playerCards[selectedPlayerUid].filter(\r\n        (item) => item !== selectedCard\r\n      );\r\n\r\n      const myCardsList = playerCards[uuid].filter(\r\n        (item) => !selectedCards.includes(item)\r\n      );\r\n\r\n      updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n        player_cards: {\r\n          ...playerCards,\r\n          [selectedPlayerUid]: selectedPlayerCards,\r\n          [uuid]: [...myCardsList, selectedCard],\r\n        },\r\n        out_card_deck: arrayUnion(...selectedCards),\r\n\r\n        game_moves: arrayUnion({\r\n          uid: uuid,\r\n          cardType: \"combo_2\",\r\n          selectedCard,\r\n          selectedPlayerUid,\r\n        }),\r\n      });\r\n    }\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const handleClickImg = (card) => {\r\n    setSelectedCard(card);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <ReactPortal wrapperId=\"react-portal-card-selection-modal\">\r\n      <div className=\"card-selection-modal\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"content_block\">\r\n            {randomizedPlayerCards.map((card) => (\r\n              <div\r\n                key={card}\r\n                className={selectedCard === card ? \"selected\" : \"\"}\r\n              >\r\n                <img\r\n                  src={revers}\r\n                  alt=\"\"\r\n                  width={200}\r\n                  height={300}\r\n                  onClick={() => handleClickImg(card)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"btn_block\">\r\n            <MainButton\r\n              text={selectedCard ? \"Go\" : \"Exit\"}\r\n              onClick={handleClick}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ReactPortal>\r\n  );\r\n};\r\n\r\nexport default CardSelectionModal;\r\n","import { useState, useLayoutEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nfunction createWrapperAndAppendToBody(wrapperId) {\r\n  const wrapperElement = document.createElement(\"div\");\r\n  wrapperElement.setAttribute(\"id\", wrapperId);\r\n  document.body.appendChild(wrapperElement);\r\n  return wrapperElement;\r\n}\r\n\r\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }) {\r\n  const [wrapperElement, setWrapperElement] = useState(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let element = document.getElementById(wrapperId);\r\n    let systemCreated = false;\r\n\r\n    if (!element) {\r\n      systemCreated = true;\r\n      element = createWrapperAndAppendToBody(wrapperId);\r\n    }\r\n    setWrapperElement(element);\r\n\r\n    return () => {\r\n      if (systemCreated && element.parentNode) {\r\n        element.parentNode.removeChild(element);\r\n      }\r\n    };\r\n  }, [wrapperId]);\r\n\r\n  if (wrapperElement === null) return;\r\n\r\n  return createPortal(children, wrapperElement);\r\n}\r\n\r\nexport default ReactPortal;\r\n"],"names":["isOpen","handleClose","id","uuid","playerCards","selectedCards","selectedPlayerUid","useState","selectedCard","setSelectedCard","randomizedPlayerCards","useMemo","randomize","ReactPortal","wrapperId","className","map","card","src","revers","alt","width","height","onClick","handleClickImg","MainButton","text","selectedPlayerCards","filter","item","myCardsList","includes","updateDoc","doc","db","player_cards","out_card_deck","arrayUnion","game_moves","uid","cardType","children","wrapperElement","setWrapperElement","useLayoutEffect","element","document","getElementById","systemCreated","createElement","setAttribute","body","appendChild","createWrapperAndAppendToBody","parentNode","removeChild","createPortal"],"sourceRoot":""}