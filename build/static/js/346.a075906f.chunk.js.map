{"version":3,"file":"static/js/346.a075906f.chunk.js","mappings":"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","sources":["components/PlayerSelectionModal/index.js","components/ReactPortal/index.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { doc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\n\r\nimport { db } from \"../../firebase\";\r\nimport * as icons from \"../../assets/icons\";\r\nimport { cardTypes } from \"../../constants/cardTypes\";\r\nimport { ToastContext } from \"../Toast\";\r\nimport ReactPortal from \"../ReactPortal\";\r\nimport MainButton from \"../MainButton\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst PlayerSelectionModal = ({\r\n  isOpen,\r\n  handleClose,\r\n  cardType,\r\n  cards,\r\n  id,\r\n  uuid,\r\n  playerCards,\r\n  playersList,\r\n  playerDataArr,\r\n  iconPack,\r\n  setCardTypeSelectionModalOpen,\r\n  setSelectedPlayer,\r\n  selectedPlayer,\r\n  setCardSelectionModalOpen,\r\n  attackCount,\r\n}) => {\r\n  const { setToast } = useContext(ToastContext);\r\n\r\n  // const [selectedPlayer, setSelectedPlayer] = useState(null);\r\n\r\n  const players = playersList.reduce((acc, item) => {\r\n    if (item !== uuid) {\r\n      acc.push(playerDataArr.find((findItem) => findItem.uid === item));\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  const handleClick = () => {\r\n    if (selectedPlayer) {\r\n      if (cards[cardType]?.type === cardTypes.favor) {\r\n        if (playerCards[selectedPlayer.uid]?.length) {\r\n          updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n            player_cards: {\r\n              ...playerCards,\r\n              [uuid]: playerCards[uuid].filter((item) => item !== cardType),\r\n            },\r\n            out_card_deck: arrayUnion(cardType),\r\n\r\n            game_moves: arrayUnion({\r\n              uid: uuid,\r\n              cardType: cards[cardType].type,\r\n              favorPlayerUid: selectedPlayer.uid,\r\n            }),\r\n          });\r\n        } else {\r\n          setToast({\r\n            type: \"danger\",\r\n            text: \"The player has no cards\",\r\n          });\r\n        }\r\n      } else if (cards[cardType]?.type === cardTypes.targetedAttack) {\r\n        updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n          player_cards: {\r\n            ...playerCards,\r\n            [uuid]: playerCards[uuid].filter((item) => item !== cardType),\r\n          },\r\n          out_card_deck: arrayUnion(cardType),\r\n\r\n          game_moves: arrayUnion({\r\n            uid: uuid,\r\n            cardType: cards[cardType].type,\r\n            newCurrentPlayerUid: selectedPlayer.uid,\r\n            oldAttackCount: attackCount,\r\n            newAttackCount: 2,\r\n          }),\r\n\r\n          attack_count: 2,\r\n          current_player_uid: selectedPlayer.uid,\r\n        });\r\n      } else if (cardType === \"combo_2\") {\r\n        if (playerCards[selectedPlayer.uid]?.length) {\r\n          setCardSelectionModalOpen(true);\r\n        } else {\r\n          setToast({\r\n            type: \"danger\",\r\n            text: \"The player has no cards\",\r\n          });\r\n        }\r\n      } else if (cardType === \"combo_3\") {\r\n        setCardTypeSelectionModalOpen(true);\r\n      }\r\n    }\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const handleClickImg = (player) => {\r\n    setSelectedPlayer(player);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <ReactPortal wrapperId=\"react-portal-player-selection-modal\">\r\n      <div className=\"player-selection-modal\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"content_block\">\r\n            {players.map((player) => (\r\n              <div\r\n                key={player.uid}\r\n                className={selectedPlayer?.uid === player.uid ? \"selected\" : \"\"}\r\n                onClick={() => handleClickImg(player)}\r\n              >\r\n                <img\r\n                  src={icons[iconPack][`${iconPack}${player.icon_index + 1}`]}\r\n                  alt=\"\"\r\n                  width=\"65px\"\r\n                  height=\"65px\"\r\n                />\r\n                <p>{player.username}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"btn_block\">\r\n            <MainButton\r\n              text={selectedPlayer ? \"Go\" : \"Exit\"}\r\n              onClick={handleClick}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ReactPortal>\r\n  );\r\n};\r\n\r\nexport default PlayerSelectionModal;\r\n","import { useState, useLayoutEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nfunction createWrapperAndAppendToBody(wrapperId) {\r\n  const wrapperElement = document.createElement(\"div\");\r\n  wrapperElement.setAttribute(\"id\", wrapperId);\r\n  document.body.appendChild(wrapperElement);\r\n  return wrapperElement;\r\n}\r\n\r\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }) {\r\n  const [wrapperElement, setWrapperElement] = useState(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let element = document.getElementById(wrapperId);\r\n    let systemCreated = false;\r\n\r\n    if (!element) {\r\n      systemCreated = true;\r\n      element = createWrapperAndAppendToBody(wrapperId);\r\n    }\r\n    setWrapperElement(element);\r\n\r\n    return () => {\r\n      if (systemCreated && element.parentNode) {\r\n        element.parentNode.removeChild(element);\r\n      }\r\n    };\r\n  }, [wrapperId]);\r\n\r\n  if (wrapperElement === null) return;\r\n\r\n  return createPortal(children, wrapperElement);\r\n}\r\n\r\nexport default ReactPortal;\r\n"],"names":["isOpen","handleClose","cardType","cards","id","uuid","playerCards","playersList","playerDataArr","iconPack","setCardTypeSelectionModalOpen","setSelectedPlayer","selectedPlayer","setCardSelectionModalOpen","attackCount","setToast","useContext","ToastContext","players","reduce","acc","item","push","find","findItem","uid","ReactPortal","wrapperId","className","map","player","onClick","handleClickImg","src","icons","icon_index","alt","width","height","username","MainButton","text","type","cardTypes","length","updateDoc","doc","db","player_cards","filter","out_card_deck","arrayUnion","game_moves","favorPlayerUid","newCurrentPlayerUid","oldAttackCount","newAttackCount","attack_count","current_player_uid","children","useState","wrapperElement","setWrapperElement","useLayoutEffect","element","document","getElementById","systemCreated","createElement","setAttribute","body","appendChild","createWrapperAndAppendToBody","parentNode","removeChild","createPortal"],"sourceRoot":""}