{"version":3,"file":"static/js/48.0ac46d8c.chunk.js","mappings":"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","sources":["components/CardPutToDeckModal/index.js","components/ReactPortal/index.js"],"sourcesContent":["import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport { doc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\n\r\nimport { db } from \"../../firebase\";\r\n// import { revers } from \"../../assets/cards\"\r\nimport { cardTypes } from \"../../constants/cardTypes\";\r\nimport ReactPortal from \"../ReactPortal\";\r\nimport MainButton from \"../MainButton\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst CardPutToDeckModal = ({\r\n  isOpen,\r\n  handleClose,\r\n  playerCards,\r\n  cardDeck,\r\n  cards,\r\n  uuid,\r\n  id,\r\n  attackCount,\r\n  playersList,\r\n}) => {\r\n  const modalRef = useRef(null);\r\n\r\n  const explodeCard = useMemo(\r\n    () =>\r\n      playerCards[uuid].find(\r\n        (item) => cards[item].type === cardTypes.explodingKitten\r\n      ),\r\n    [playerCards, cards, uuid]\r\n  );\r\n  const defuseCard = useMemo(\r\n    () =>\r\n      playerCards[uuid].find((item) => cards[item].type === cardTypes.defuse),\r\n    [playerCards, cards, uuid]\r\n  );\r\n  const impendingImplodingKittenCard = useMemo(\r\n    () =>\r\n      playerCards[uuid].find(\r\n        (item) => cards[item].type === cardTypes.impendingImplodingKitten\r\n      ),\r\n    [playerCards, cards, uuid]\r\n  );\r\n\r\n  const [newCardDeck, setNewCardDeck] = useState([]);\r\n  useEffect(() => {\r\n    if (explodeCard) {\r\n      setNewCardDeck([explodeCard, ...cardDeck]);\r\n    }\r\n    if (impendingImplodingKittenCard) {\r\n      setNewCardDeck([impendingImplodingKittenCard, ...cardDeck]);\r\n    }\r\n  }, [cardDeck, explodeCard, impendingImplodingKittenCard]);\r\n\r\n  const handleClick = () => {\r\n    // console.log({ newCardDeck });\r\n\r\n    if (explodeCard) {\r\n      if (attackCount > 0) {\r\n        updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n          player_cards: {\r\n            ...playerCards,\r\n            [uuid]: playerCards[uuid].filter(\r\n              (item) => item !== defuseCard && item !== explodeCard\r\n            ),\r\n          },\r\n          out_card_deck: arrayUnion(defuseCard),\r\n          card_deck: newCardDeck,\r\n          // game_moves: arrayUnion({ uid: uuid, cardType: cards[defuseCard]?.type }),\r\n          game_moves: [],\r\n          attack_count: attackCount - 1,\r\n        });\r\n      } else {\r\n        const index = playersList.findIndex((item) => item === uuid);\r\n\r\n        updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n          player_cards: {\r\n            ...playerCards,\r\n            [uuid]: playerCards[uuid].filter(\r\n              (item) => item !== defuseCard && item !== explodeCard\r\n            ),\r\n          },\r\n          out_card_deck: arrayUnion(defuseCard),\r\n          card_deck: newCardDeck,\r\n          // game_moves: arrayUnion({ uid: uuid, cardType: cards[defuseCard]?.type }),\r\n          game_moves: [],\r\n          current_player_uid:\r\n            index === playersList.length - 1\r\n              ? playersList[0]\r\n              : playersList[index + 1],\r\n        });\r\n      }\r\n    } else if (impendingImplodingKittenCard) {\r\n      if (attackCount > 0) {\r\n        updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n          player_cards: {\r\n            ...playerCards,\r\n            [uuid]: playerCards[uuid].filter(\r\n              (item) => item !== impendingImplodingKittenCard\r\n            ),\r\n          },\r\n          card_deck: newCardDeck,\r\n          game_moves: [],\r\n          is_impending_imploding_kitten: true,\r\n          attack_count: attackCount - 1,\r\n        });\r\n      } else {\r\n        const index = playersList.findIndex((item) => item === uuid);\r\n\r\n        updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n          player_cards: {\r\n            ...playerCards,\r\n            [uuid]: playerCards[uuid].filter(\r\n              (item) => item !== impendingImplodingKittenCard\r\n            ),\r\n          },\r\n          card_deck: newCardDeck,\r\n          game_moves: [],\r\n          is_impending_imploding_kitten: true,\r\n          current_player_uid:\r\n            index === playersList.length - 1\r\n              ? playersList[0]\r\n              : playersList[index + 1],\r\n        });\r\n      }\r\n    }\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const [dragEl, setDragEl] = useState(null);\r\n\r\n  function handleDragStart({ e, card }) {\r\n    if (card === explodeCard) {\r\n      setDragEl(card);\r\n\r\n      e.dataTransfer.effectAllowed = \"move\";\r\n      // e.dataTransfer.setDragImage(e.target, 100, 100);\r\n    }\r\n  }\r\n\r\n  function handleDragOver(e) {\r\n    if (e.preventDefault) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    e.dataTransfer.dropEffect = \"move\";\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleDragEnter({ e, card }) {\r\n    if (dragEl === explodeCard) {\r\n      const item = modalRef.current?.querySelector(\r\n        `.dnd_item[data-card=${card}]`\r\n      );\r\n\r\n      if (item) item.classList.add(\"over\");\r\n    }\r\n  }\r\n\r\n  function handleDragLeave({ e, card }) {\r\n    if (dragEl === explodeCard) {\r\n      const item = modalRef.current?.querySelector(\r\n        `.dnd_item[data-card=${card}]`\r\n      );\r\n\r\n      if (item) item.classList.remove(\"over\");\r\n    }\r\n  }\r\n\r\n  function handleDrop({ e, card }) {\r\n    if (e.stopPropagation) {\r\n      e.stopPropagation();\r\n    }\r\n\r\n    if (dragEl === explodeCard) {\r\n      const cardIndex = newCardDeck.findIndex((item) => item === card);\r\n      const explodeCardIndex = newCardDeck.findIndex(\r\n        (item) => item === explodeCard\r\n      );\r\n\r\n      setNewCardDeck((prev) =>\r\n        prev.reduce((acc, item, index) => {\r\n          if (index === explodeCardIndex) {\r\n            acc.push(card);\r\n          } else if (index === cardIndex) {\r\n            acc.push(explodeCard);\r\n          } else {\r\n            acc.push(item);\r\n          }\r\n\r\n          return acc;\r\n        }, [])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleDragEnd(e) {\r\n    if (dragEl === explodeCard) {\r\n      const items = modalRef.current?.querySelectorAll(\r\n        \".dnd_container .dnd_item\"\r\n      );\r\n\r\n      items?.forEach(function (item) {\r\n        item.classList.remove(\"over\");\r\n      });\r\n    } else {\r\n      setDragEl(null);\r\n    }\r\n  }\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <ReactPortal wrapperId=\"react-portal-card-put-to-deck-modal\">\r\n      <div className=\"card-put-to-deck-modal\" ref={modalRef}>\r\n        <div className=\"modal-content\">\r\n          <div className=\"content_block dnd_container\">\r\n            {newCardDeck.map((card, index) => (\r\n              <div\r\n                key={card}\r\n                className=\"dnd_item\"\r\n                onDragStart={(e) => handleDragStart({ e, card })}\r\n                onDragEnter={(e) => handleDragEnter({ e, card })}\r\n                onDragOver={handleDragOver}\r\n                onDragLeave={(e) => handleDragLeave({ e, card })}\r\n                onDrop={(e) => handleDrop({ e, card })}\r\n                onDragEnd={handleDragEnd}\r\n                data-card={card}\r\n                draggable\r\n              >\r\n                {card === explodeCard || card === impendingImplodingKittenCard\r\n                  ? \"X\"\r\n                  : index + 1}\r\n                {/*<img src={card === explodeCard ? cards[card]?.img : revers} alt=\"\" width={200} height={300} />*/}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"btn_block\">\r\n            <MainButton text=\"Go\" onClick={handleClick} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ReactPortal>\r\n  );\r\n};\r\n\r\nexport default CardPutToDeckModal;\r\n","import { useState, useLayoutEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nfunction createWrapperAndAppendToBody(wrapperId) {\r\n  const wrapperElement = document.createElement(\"div\");\r\n  wrapperElement.setAttribute(\"id\", wrapperId);\r\n  document.body.appendChild(wrapperElement);\r\n  return wrapperElement;\r\n}\r\n\r\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }) {\r\n  const [wrapperElement, setWrapperElement] = useState(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let element = document.getElementById(wrapperId);\r\n    let systemCreated = false;\r\n\r\n    if (!element) {\r\n      systemCreated = true;\r\n      element = createWrapperAndAppendToBody(wrapperId);\r\n    }\r\n    setWrapperElement(element);\r\n\r\n    return () => {\r\n      if (systemCreated && element.parentNode) {\r\n        element.parentNode.removeChild(element);\r\n      }\r\n    };\r\n  }, [wrapperId]);\r\n\r\n  if (wrapperElement === null) return;\r\n\r\n  return createPortal(children, wrapperElement);\r\n}\r\n\r\nexport default ReactPortal;\r\n"],"names":["isOpen","handleClose","playerCards","cardDeck","cards","uuid","id","attackCount","playersList","modalRef","useRef","explodeCard","useMemo","find","item","type","cardTypes","defuseCard","impendingImplodingKittenCard","useState","newCardDeck","setNewCardDeck","useEffect","dragEl","setDragEl","handleDragOver","e","preventDefault","dataTransfer","dropEffect","handleDragEnd","items","current","querySelectorAll","forEach","classList","remove","ReactPortal","wrapperId","className","ref","map","card","index","onDragStart","effectAllowed","handleDragStart","onDragEnter","querySelector","add","handleDragEnter","onDragOver","onDragLeave","handleDragLeave","onDrop","stopPropagation","cardIndex","findIndex","explodeCardIndex","prev","reduce","acc","push","handleDrop","onDragEnd","draggable","MainButton","text","onClick","updateDoc","doc","db","player_cards","filter","out_card_deck","arrayUnion","card_deck","game_moves","attack_count","current_player_uid","length","is_impending_imploding_kitten","children","wrapperElement","setWrapperElement","useLayoutEffect","element","document","getElementById","systemCreated","createElement","setAttribute","body","appendChild","createWrapperAndAppendToBody","parentNode","removeChild","createPortal"],"sourceRoot":""}