{"version":3,"file":"static/js/132.33a85931.chunk.js","mappings":"sRAgGA,EAtFuB,SAAC,GAQjB,IAPLA,EAOI,EAPJA,OACAC,EAMI,EANJA,YACAC,EAKI,EALJA,MACAC,EAII,EAJJA,GACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,YACAC,EACI,EADJA,WAEA,GAAwCC,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,UACf,kBAAMN,EAAYD,GAAMQ,MAAK,SAACC,GAAD,OAAUX,EAAMW,GAAMC,OAASC,EAAAA,EAAAA,IAA/B,GAA7B,GACA,CAACV,EAAaH,EAAOE,IAyCvB,OAAKJ,GAGH,SAACgB,EAAA,EAAD,CAAaC,UAAU,gCAAvB,UACE,gBAAKC,UAAU,mBAAf,UACE,iBAAKA,UAAU,gBAAf,WACE,iBAAKA,UAAU,gBAAf,UACGR,IAAY,mBAAQS,QApBP,YACtBC,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,oBAAqBnB,GAAK,CAC1CoB,cAAa,kBACRlB,GADO,cAETD,EAAOC,EAAYD,GAAMoB,QAAO,SAACX,GAAD,OAAUA,IAASH,CAAnB,MAEnCe,eAAeC,EAAAA,EAAAA,IAAWhB,GAC1BiB,YAAYD,EAAAA,EAAAA,IAAW,CAAEE,IAAKxB,EAAMyB,SAAUd,EAAAA,EAAAA,SAGhDd,GACD,EASsB,mBACb,gBAAKiB,UAAU,QAAf,SACGb,EAAYD,GAAM0B,KAAI,SAACC,GAAD,aACrB,0BACE,gBACEC,IAAG,UAAE9B,EAAM6B,UAAR,aAAE,EAAaE,IAClBC,IAAI,GACJC,MAAO,IACPC,OAAQ,IACRjB,QAAS,kBAjCJ,SAACY,GACtBtB,EAAgBsB,EACjB,CA+BgCM,CAAeN,EAArB,EACTb,UAAWV,IAAiBuB,EAAO,WAAa,MAP1CA,EADW,UAc3B,gBAAKb,UAAU,YAAf,UACE,SAACoB,EAAA,EAAD,CAAYC,KAAK,KAAKpB,QA9DZ,WACC,IAAD,EAAdX,IACFY,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,oBAAqBnB,GAAK,CAC1CoB,cAAa,kBACRlB,GADO,mBAETD,EAAOC,EAAYD,GAAMoB,QAAO,SAACX,GAAD,OAAUA,IAASL,CAAnB,MAFvB,SAGTF,EAHS,kBAGQD,EAAYC,IAHpB,CAGiCE,KAHjC,IAMZmB,YAAYD,EAAAA,EAAAA,IAAW,CACrBE,IAAKxB,EACLyB,SAAU,eACVrB,aAAAA,EACAF,WAAAA,MAKNL,GACD,aAmBmB,IA8BrB,C,sDC3DD,IAzBA,YAAwE,IAAjDuC,EAAgD,EAAhDA,SAAgD,IAAtCvB,UAAAA,OAAsC,MAA1B,uBAA0B,EACrE,GAA4CV,EAAAA,EAAAA,UAAS,MAArD,eAAOkC,EAAP,KAAuBC,EAAvB,KAmBA,IAjBAC,EAAAA,EAAAA,kBAAgB,WACd,IAAIC,EAAUC,SAASC,eAAe7B,GAClC8B,GAAgB,EAQpB,OANKH,IACHG,GAAgB,EAChBH,EAhBN,SAAsC3B,GACpC,IAAMwB,EAAiBI,SAASG,cAAc,OAG9C,OAFAP,EAAeQ,aAAa,KAAMhC,GAClC4B,SAASK,KAAKC,YAAYV,GACnBA,CACR,CAWeW,CAA6BnC,IAEzCyB,EAAkBE,GAEX,WACDG,GAAiBH,EAAQS,YAC3BT,EAAQS,WAAWC,YAAYV,EAElC,CACF,GAAE,CAAC3B,IAEmB,OAAnBwB,EAEJ,OAAOc,EAAAA,EAAAA,cAAaf,EAAUC,EAC/B,C","sources":["components/FavorCardModal/index.js","components/ReactPortal/index.js"],"sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport { doc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\n\r\nimport { db } from \"../../firebase\";\r\nimport { cardTypes } from \"../../constants/cardTypes\";\r\nimport ReactPortal from \"../ReactPortal\";\r\nimport MainButton from \"../MainButton\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst FavorCardModal = ({\r\n  isOpen,\r\n  handleClose,\r\n  cards,\r\n  id,\r\n  uuid,\r\n  playerCards,\r\n  favoredUid,\r\n}) => {\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n\r\n  const nopeCard = useMemo(\r\n    () => playerCards[uuid].find((item) => cards[item].type === cardTypes.nope),\r\n    [playerCards, cards, uuid]\r\n  );\r\n\r\n  const handleClick = () => {\r\n    if (selectedCard) {\r\n      updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n        player_cards: {\r\n          ...playerCards,\r\n          [uuid]: playerCards[uuid].filter((item) => item !== selectedCard),\r\n          [favoredUid]: [...playerCards[favoredUid], selectedCard],\r\n        },\r\n\r\n        game_moves: arrayUnion({\r\n          uid: uuid,\r\n          cardType: \"favor_answer\",\r\n          selectedCard,\r\n          favoredUid,\r\n        }),\r\n      });\r\n    }\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const handleClickImg = (card) => {\r\n    setSelectedCard(card);\r\n  };\r\n\r\n  const handleClickNope = () => {\r\n    updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n      player_cards: {\r\n        ...playerCards,\r\n        [uuid]: playerCards[uuid].filter((item) => item !== nopeCard),\r\n      },\r\n      out_card_deck: arrayUnion(nopeCard),\r\n      game_moves: arrayUnion({ uid: uuid, cardType: cardTypes.nope }),\r\n    });\r\n\r\n    handleClose();\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <ReactPortal wrapperId=\"react-portal-favor-card-modal\">\r\n      <div className=\"favor-card-modal\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"content_block\">\r\n            {nopeCard && <button onClick={handleClickNope}>Nope</button>}\r\n            <div className=\"cards\">\r\n              {playerCards[uuid].map((card) => (\r\n                <div key={card}>\r\n                  <img\r\n                    src={cards[card]?.img}\r\n                    alt=\"\"\r\n                    width={200}\r\n                    height={300}\r\n                    onClick={() => handleClickImg(card)}\r\n                    className={selectedCard === card ? \"selected\" : \"\"}\r\n                  />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"btn_block\">\r\n            <MainButton text=\"Go\" onClick={handleClick} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ReactPortal>\r\n  );\r\n};\r\n\r\nexport default FavorCardModal;\r\n","import { useState, useLayoutEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nfunction createWrapperAndAppendToBody(wrapperId) {\r\n  const wrapperElement = document.createElement(\"div\");\r\n  wrapperElement.setAttribute(\"id\", wrapperId);\r\n  document.body.appendChild(wrapperElement);\r\n  return wrapperElement;\r\n}\r\n\r\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }) {\r\n  const [wrapperElement, setWrapperElement] = useState(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let element = document.getElementById(wrapperId);\r\n    let systemCreated = false;\r\n\r\n    if (!element) {\r\n      systemCreated = true;\r\n      element = createWrapperAndAppendToBody(wrapperId);\r\n    }\r\n    setWrapperElement(element);\r\n\r\n    return () => {\r\n      if (systemCreated && element.parentNode) {\r\n        element.parentNode.removeChild(element);\r\n      }\r\n    };\r\n  }, [wrapperId]);\r\n\r\n  if (wrapperElement === null) return;\r\n\r\n  return createPortal(children, wrapperElement);\r\n}\r\n\r\nexport default ReactPortal;\r\n"],"names":["isOpen","handleClose","cards","id","uuid","playerCards","favoredUid","useState","selectedCard","setSelectedCard","nopeCard","useMemo","find","item","type","cardTypes","ReactPortal","wrapperId","className","onClick","updateDoc","doc","db","player_cards","filter","out_card_deck","arrayUnion","game_moves","uid","cardType","map","card","src","img","alt","width","height","handleClickImg","MainButton","text","children","wrapperElement","setWrapperElement","useLayoutEffect","element","document","getElementById","systemCreated","createElement","setAttribute","body","appendChild","createWrapperAndAppendToBody","parentNode","removeChild","createPortal"],"sourceRoot":""}