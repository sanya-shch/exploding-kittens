{"version":3,"file":"static/js/936.34715e67.chunk.js","mappings":"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","sources":["components/CardSeeTheFutureModal/index.js","components/ReactPortal/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { doc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\n\r\nimport { db } from \"../../firebase\";\r\nimport { cardTypes } from \"../../constants/cardTypes\";\r\nimport ReactPortal from \"../ReactPortal\";\r\nimport MainButton from \"../MainButton\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst CardSeeTheFutureModal = ({\r\n  isOpen,\r\n  handleClose,\r\n  cardType,\r\n  cardDeck,\r\n  cards,\r\n  id,\r\n  uuid,\r\n  playerCards,\r\n}) => {\r\n  const modalRef = useRef(null);\r\n\r\n  const [newCardDeck, setNewCardDeck] = useState([]);\r\n  useEffect(() => {\r\n    setNewCardDeck([...cardDeck]);\r\n  }, [cardDeck]);\r\n\r\n  const [dragEl, setDragEl] = useState(null);\r\n\r\n  function handleDragStart({ e, card }) {\r\n    if (cards[cardType]?.type === cardTypes.alterTheFuture) {\r\n      setDragEl(card);\r\n\r\n      e.dataTransfer.effectAllowed = \"move\";\r\n      e.dataTransfer.setDragImage(e.target, 100, 100);\r\n    }\r\n  }\r\n\r\n  function handleDragOver(e) {\r\n    if (e.preventDefault) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    if (cards[cardType]?.type === cardTypes.alterTheFuture) {\r\n      e.dataTransfer.dropEffect = \"move\";\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // function handleDragEnter({ e, card }) {\r\n  //   const item = modalRef.current?.querySelector(`.dnd_item[data-card=${card}]`);\r\n  //\r\n  //   if (item) item.classList.add('over');\r\n  // }\r\n\r\n  // function handleDragLeave({ e, card }) {\r\n  //   const item = modalRef.current?.querySelector(`.dnd_item[data-card=${card}]`);\r\n  //\r\n  //   if (item) item.classList.remove('over');\r\n  // }\r\n\r\n  function handleDrop({ e, card }) {\r\n    if (e.stopPropagation) {\r\n      e.stopPropagation();\r\n    }\r\n\r\n    if (cards[cardType]?.type === cardTypes.alterTheFuture) {\r\n      const cardIndex = newCardDeck.findIndex((item) => item === card);\r\n      const dndCardIndex = newCardDeck.findIndex((item) => item === dragEl);\r\n\r\n      setNewCardDeck((prev) =>\r\n        prev.reduce((acc, item, index) => {\r\n          if (index === dndCardIndex) {\r\n            acc.push(card);\r\n          } else if (index === cardIndex) {\r\n            acc.push(dragEl);\r\n          } else {\r\n            acc.push(item);\r\n          }\r\n\r\n          return acc;\r\n        }, [])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleDragEnd(e) {\r\n    if (cards[cardType]?.type === cardTypes.alterTheFuture) {\r\n      const items = modalRef.current?.querySelectorAll(\r\n        \".dnd_container .dnd_item\"\r\n      );\r\n\r\n      items?.forEach(function (item) {\r\n        item.classList.remove(\"over\");\r\n      });\r\n      setDragEl(null);\r\n    }\r\n  }\r\n\r\n  const handleClick = () => {\r\n    if (cards[cardType]?.type === cardTypes.alterTheFuture) {\r\n      updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n        player_cards: {\r\n          ...playerCards,\r\n          [uuid]: playerCards[uuid].filter((item) => item !== cardType),\r\n        },\r\n        out_card_deck: arrayUnion(cardType),\r\n\r\n        card_deck: newCardDeck,\r\n        game_moves: arrayUnion({\r\n          uid: uuid,\r\n          cardType: cards[cardType]?.type,\r\n          oldCardDeck: cardDeck,\r\n          newCardDeck,\r\n        }),\r\n      });\r\n    } else {\r\n      updateDoc(doc(db, \"game_rooms_kitten\", id), {\r\n        player_cards: {\r\n          ...playerCards,\r\n          [uuid]: playerCards[uuid].filter((item) => item !== cardType),\r\n        },\r\n        out_card_deck: arrayUnion(cardType),\r\n\r\n        game_moves: arrayUnion({ uid: uuid, cardType: cards[cardType]?.type }),\r\n      });\r\n    }\r\n\r\n    handleClose();\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <ReactPortal wrapperId=\"react-portal-card-see-the-future-modal\">\r\n      <div className=\"card-see-the-future-modal\" ref={modalRef}>\r\n        <div className=\"modal-content\">\r\n          <div className=\"content_block dnd_container\">\r\n            {newCardDeck.length &&\r\n              newCardDeck.map(\r\n                (card, index) =>\r\n                  index < 3 && (\r\n                    <div\r\n                      key={card}\r\n                      className={`dnd_item ${\r\n                        cards[cardType]?.type === cardTypes.alterTheFuture\r\n                          ? \"move\"\r\n                          : \"\"\r\n                      }`}\r\n                      onDragStart={(e) => handleDragStart({ e, card })}\r\n                      // onDragEnter={e => handleDragEnter({ e, card })}\r\n                      onDragOver={handleDragOver}\r\n                      // onDragLeave={e => handleDragLeave({ e, card })}\r\n                      onDrop={(e) => handleDrop({ e, card })}\r\n                      onDragEnd={handleDragEnd}\r\n                      data-card={card}\r\n                      draggable\r\n                    >\r\n                      <img\r\n                        src={cards[card].img}\r\n                        alt={cards[card].title}\r\n                        width={200}\r\n                        height={300}\r\n                      />\r\n                    </div>\r\n                  )\r\n              )}\r\n          </div>\r\n          <div className=\"btn_block\">\r\n            <MainButton text=\"Go\" onClick={handleClick} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ReactPortal>\r\n  );\r\n};\r\n\r\nexport default CardSeeTheFutureModal;\r\n","import { useState, useLayoutEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nfunction createWrapperAndAppendToBody(wrapperId) {\r\n  const wrapperElement = document.createElement(\"div\");\r\n  wrapperElement.setAttribute(\"id\", wrapperId);\r\n  document.body.appendChild(wrapperElement);\r\n  return wrapperElement;\r\n}\r\n\r\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }) {\r\n  const [wrapperElement, setWrapperElement] = useState(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let element = document.getElementById(wrapperId);\r\n    let systemCreated = false;\r\n\r\n    if (!element) {\r\n      systemCreated = true;\r\n      element = createWrapperAndAppendToBody(wrapperId);\r\n    }\r\n    setWrapperElement(element);\r\n\r\n    return () => {\r\n      if (systemCreated && element.parentNode) {\r\n        element.parentNode.removeChild(element);\r\n      }\r\n    };\r\n  }, [wrapperId]);\r\n\r\n  if (wrapperElement === null) return;\r\n\r\n  return createPortal(children, wrapperElement);\r\n}\r\n\r\nexport default ReactPortal;\r\n"],"names":["isOpen","handleClose","cardType","cardDeck","cards","id","uuid","playerCards","modalRef","useRef","useState","newCardDeck","setNewCardDeck","useEffect","dragEl","setDragEl","handleDragOver","e","preventDefault","type","cardTypes","dataTransfer","dropEffect","handleDragEnd","items","current","querySelectorAll","forEach","item","classList","remove","ReactPortal","wrapperId","className","ref","length","map","card","index","onDragStart","effectAllowed","setDragImage","target","handleDragStart","onDragOver","onDrop","stopPropagation","cardIndex","findIndex","dndCardIndex","prev","reduce","acc","push","handleDrop","onDragEnd","draggable","src","img","alt","title","width","height","MainButton","text","onClick","updateDoc","doc","db","player_cards","filter","out_card_deck","arrayUnion","card_deck","game_moves","uid","oldCardDeck","children","wrapperElement","setWrapperElement","useLayoutEffect","element","document","getElementById","systemCreated","createElement","setAttribute","body","appendChild","createWrapperAndAppendToBody","parentNode","removeChild","createPortal"],"sourceRoot":""}